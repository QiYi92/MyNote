<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【教程】Hexo博客镜像双部署 github和coding</title>
      <link href="/hexo2/"/>
      <url>/hexo2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客部署在github上时，很多人反映访问博客时速度很慢，或者直接是打不开。Github的服务器在国外，所以国内访问会比较慢，这里我选者在国内coding部署一个镜像，通过域名解析的方式对访问者进行分流</p><h2 id="coding和gitee"><a href="#coding和gitee" class="headerlink" title="coding和gitee"></a>coding和gitee</h2><p>国内有两个托管平台<strong>coding</strong>和<strong>gitee</strong><br>gitee如果要使用自定义域名解析的话需要购买gitee pages pro服务<br>需要99rmb/年，本来说做镜像站不考虑经济因素的话推荐gitee,它的访问速度是要优于coding。<br>但遗憾是gitee最近停止了对个人用户出售gitee pages pro<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110151816799.png"><br>所以我们目前的选择只有coding了</p><h1 id="coding部署"><a href="#coding部署" class="headerlink" title="coding部署"></a>coding部署</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>注册Coding平台<br><a href="https://coding.net/">传送门</a></p><h2 id="用Git绑定Coding文件"><a href="#用Git绑定Coding文件" class="headerlink" title="用Git绑定Coding文件"></a>用Git绑定Coding文件</h2><p>首先需要提前对Git进行用户名和密码的配置<br>这一步在前面部署’github pages’一般都已经完成了,没有完成的可以搜索一下其他教程</p><h2 id="SSH公钥绑定"><a href="#SSH公钥绑定" class="headerlink" title="SSH公钥绑定"></a>SSH公钥绑定</h2><p>接下来进入个人账户设置<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152021234.png"><br>绑定SSH公钥<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152035888.png"><br>SSH公钥的路径一般是<code>C:\Users\你的名字\.ssh</code><br>用记事本打开<code>id_rsa.pub</code>文件复制粘贴即可<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152039246.png"></p><p>完成设置后在博客根目录里打开git bash<br>输入</p><pre class="language-none"><code class="language-none">$ ssh -T git@e.coding.net</code></pre><p>出现这种情况就说明成功了<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152056687.png"></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><strong>注意！！！项目名称一定要和你的coding名称一致</strong><br>不然构建部署有很大概率会出错<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152041735.png"><br>完成创建<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152042737.png"><br>接下来在项目里面创建仓库<br>仓库名字为<code>你的用户名.coding.me</code><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152044273.png"></p><h2 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h2><p>这一步需要打开你博客文件夹的根目录打开<code>_conflg.yml</code><br>找到这一行<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152046606.png"><br>这里的repo是双部署的重点，一定要按照格式来写</p><pre class="language-none"><code class="language-none">deploy:- type: git  repo:     github: git@github.com:QiYi92/QiYi92.github.io.git,main    coding: git@e.coding.net:galileocat/galileocat/galileocat.coding.me.git,master</code></pre><p>如果不知道coding的ssh地址可以在<code>代码仓库</code>-<code>设置</code>-<code>基本设置</code>里找到<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152048210.png"><br>ssh地址后面是<code>分支名</code><br>这里github默认是<code>main</code><br>而gitee和coding默认是<code>master</code><br><strong>一定要设置正确，不然在push仓库的时候会报错</strong></p><p>设置完成后在你博客根目录里<code>hexo``hexo d</code>即可</p><h2 id="网站部署"><a href="#网站部署" class="headerlink" title="网站部署"></a>网站部署</h2><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152050202.png"><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152051967.png"><br>一键部署即可<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152056609.png"><br>如果失败就检查前几步是否有问题</p><p>接下来将在你注册域名的平台，腾讯云，阿里云上把coding给你的地址添加到解析里就行了<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152058446.png"><br>我这里是腾讯云，这里把线路类型设置成<strong>境内</strong>，这样境内用户就会自动访问到coding，而境外就会访问github,前提是你在github上也设置了解析<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202110152100111.png"><br>完成！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用微力同步进行多端同步开发</title>
      <link href="/sync2/"/>
      <url>/sync2/</url>
      
        <content type="html"><![CDATA[<p>我一般做项目都是用我的主力机进行开发（主要还是3080+3700x比较香），但也有迫不得已使用笔记本进行工作的时候</p><p>这时候如果对已有项目进行修改，就非常麻烦，要从主力机或者github上下载项目，开发告一段落还要主动上传和更新。。。</p><p>这两天快要过年了，到处走亲访友导致我coding使用笔记本非常频繁，决定把多端同步提上日程</p><p>通过多方查找资料，在Snycthing和坚果云上犹豫了好久，最后在一篇博客上发现airdisk NAS已经支持微力同步了，airdisk不就是我在使用的nas嘛..</p><p>一查，果然有这个功能（用了那么久居然没看见…）</p><p>一番摸索，终于搞懂了这东西的用法，在此记录一下…</p><p>进入airdisk NAS界面<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172126017.png"></p><p>点击微力同步<br>会进入到局域网的微力同步界面<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172128772.png"></p><p>首先将你本地的计算机添加到微力的设备管理中<br>点击右边绿色的<code>本机ID</code><br>复制设备ID<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172133764.png"></p><p>点然后退出来点 添加设备<br>粘贴到“设备标识”里，点“保存”<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172133038.png"></p><p>我们看到我们的NAS已经添加到微力同步里了<br><strong>（如果你没有NAS用两台电脑互相传输也是可以的）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172134913.png"></p><p>再把本地的第一台PC（以下称主PC）添加<br>到微力官网下载win版的客户端<br><a href="http://www.verysync.com/download.html">官网链接</a></p><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172131553.png"></p><p>安装，然后如法炮制<br>然后PC端和NAS端都需要把自己和对方添加进去<br>添加完成后已经可以在界面互相看到对方了，这就说明已经连接成功<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172136671.png"></p><p>现在已经能连接上了<br>现在我们要设置需要电脑之间需要同步的文件夹。设置完成后，只要两台电脑保持开机并且微力同步处于运行状态，就能保证文件夹内的文件永远保持同步，非常适合用多台电脑同时写一个项目的时候。<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172137019.png"></p><p>这里我选择Python的项目文件夹<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172139095.png"></p><p>这里我们选择读写<br>这样你才能在其他计算机上对其进行修改<br>好，已经提交同步了，接下来我们要在NAS端进行同步<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172143381.png"></p><p>打卡NAS端的微力，点击链接或秘钥，把我们刚刚项目文件夹的链接复制过去<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172143495.png"></p><p>然后就是在NAS上创建一个空间来储存我们的项目<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172144649.png"></p><p>现在已经看到同步已经生效了<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172145906.png"></p><p>如果是两台电脑间进行同步也一样，我这里使用了NAS进行中转，如果没有NAS就直接在两台电脑上互相绑定就好了</p><p>这样就可以用两台电脑进行同步开发了</p><p>如果没有NAS也不要紧，只要让两台电脑在你需要文件同步时都保持开机状态就可以了</p><p>我使用NAS主要是因为NAS可以7x24小时运行，这样利于NAS可以让我的本地代码库时刻保持最新状态</p><p>例如这样：<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172147358.png"><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172147812.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 微力同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复airdisk上微力同步功能拒绝访问的问题</title>
      <link href="/sync1/"/>
      <url>/sync1/</url>
      
        <content type="html"><![CDATA[<p>记录一下解决airdisk Q3X NAS服务器的微力同步功能拒绝请求的问题<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172105291.png"></p><hr><p>这个问题也是困扰了我两天，我询问了airdisk的售后，以及微力同步社区都没有任何回应，最后还是添加了微力同步开发者的QQ才解决问题。。。<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172110758.png"></p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>解决方法：<br>首先将<code>airDisk Q3X</code>通过Type B口直连电脑，也就是移动硬盘模式<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172114465.png"></p><p>查找<strong>根目录</strong>下的<code>.verysync</code>文件夹<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172115975.png"><br>打开后差不多是这个样子</p><p>然后<br>删除<code>vsync.db</code><br>再删除<code>index-v0.14.0.db</code>文件夹<br>这样就能重置微力同步了<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172118587.png"><br>如果还是不行就删除整个<code>.verysync</code>文件夹</p><p>最后更新版本<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108172119630.png"><br>重新连接pc进行同步就ok</p><p>这个问题是由于airdisk Q3X异常断点导致的，如果家里停电或者突然拔线就容易出现这个问题</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> debug </tag>
            
            <tag> 微力同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【浅谈】基于github托管，利用hexo+picgo+gitnote构筑一套带图床的完整个人博客生态</title>
      <link href="/hexo1/"/>
      <url>/hexo1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先展示一下部署在github上的hexo博客界面<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072129639.jpg"></p><p>这是半年前部署在腾讯云上的wordpresss<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072129263.jpg"></p><hr><p>要说谁更好看。。。见仁见智吧<br>wordpress是动态站点，功能强大，可以整很多好活，其次是可以做到快速部署，技术门槛比hexo低很多，缺点是比较臃肿，访问速度一般<br>hexo是静态站点，访问速度要优于wordpress，部署还是需要掌握一定的git和Node.js</p><p>比较过后我还是将博客从wordpress迁移到hexo</p><h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><p>从成本上来说wordpress每年100多的腾讯云服务器就个人来说还是有些稍贵，这还是学生优惠，之后续费将会非常肉疼。<br>而hexo利用Github pages服务搭建hexo博客是免费的。</p><h2 id="维护性"><a href="#维护性" class="headerlink" title="维护性"></a>维护性</h2><p>虚拟主机，可以在设置面板中一键安装，非常方便。云服务器的话要麻烦一些。部署好之后登陆即可发布博客，而且 wordpress 功能强大，易于维护，但是成本较高。而且博客一般会有配图，而且如果后期要迁移图床的话也比较麻烦。</p><p>hexo配合github也能做到一键部署、发布。而且利用picgo, gitnote这些git服务管理工具用起来非常方便</p><p>下面记录一下我整hexo的思路和遇到的一些问题</p><h1 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先下载稳定版</p><p><a href="https://link.zhihu.com/?target=https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">Node.js传送门</a></p><p>安装选项全部默认，一路点击Next。</p><p>最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><p>安装完成后添加淘宝的镜像进行加速</p><pre class="language-none"><code class="language-none">npm config set registry https://registry.npm.taobao.org</code></pre><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git</p><pre class="language-none"><code class="language-none">https://link.zhihu.com/?target=https%3A//git-scm.com/download/win</code></pre><p>安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入git –version验证是否安装成功。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在你希望存放自己博客文件的地方新建一个文件夹，我自己直接存放在E盘的<strong>blog</strong>文件夹内<br>之后在此文件夹右键打开<code>Git Bash Here</code><br>！！！注意储存路径不能有中文！！！<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081612202.png"><br>以后对博客的所有操作都在这个git控制台执行<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081613162.png"><br>输入<code>npm i hexo-cli -g</code>安装Hexo<br>安装完成后输入<code>hexo -v</code>如果出现版本号说明安装成功<br>接着输入<code>hexo init</code>初始化文件夹<br><code>hexo g</code>生成静态网页<br><code>hexo s</code>打开本地服务器<br>之后在浏览器输入<strong>localhost:4000</strong>查看，可以发现博客已经部署在我们本地服务器上了<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081715997.png"><br>这算是一个预览状态，以后做的所有操作例如更新文章，修改主题，都要在本地预览，无误后再上传github服务器<br>确认无误后<code>ctrl+c</code>关闭本地服务器</p><h2 id="连接github和域名解析"><a href="#连接github和域名解析" class="headerlink" title="连接github和域名解析"></a>连接github和域名解析</h2><p>github就不多说了，没注册去注册<br>注册完后新建一个项目仓库<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081724541.png"><br>注意这里仓库名称一定是这个格式<br><code>你的github名.github,io</code><br>不能起其他名字，这一点很重要<br>例如我id是QiYi92，那么我博客仓库起名就是<code>QiYi92.github.io</code><br>以后如果你不设置自己的域名，那直接在浏览器里输入这个仓库名就可以连接到你自己的博客</p><h2 id="git秘钥配置"><a href="#git秘钥配置" class="headerlink" title="git秘钥配置"></a>git秘钥配置</h2><ol><li><p>本地安装好git；</p></li><li><p>桌面右键 Git Bash Here 打开git命令行；</p></li><li><p><code>ssh-keygen -t rsa -C "nideyouxiang@xxx.com"</code>   （全部按enter）；</p></li><li><p><code>cd ~/.ssh</code>   （如果没有执行第三步，则不会有这个文件夹）；</p></li><li><p><code>cat id_rsa.pub</code>     在命令行打开这个文件，会直接输出密钥；</p></li><li><p>复制即可，打开github   ，点自己头像 &gt;&gt; settings &gt;&gt; SSH and GPG keys &gt;&gt;New SSH key </p></li><li><p>title写blog key里把秘钥粘贴上去就完事</p></li></ol><p>测试<br>输入<code>ssh -T git@github.com</code>如果出现你的用户名就说明成功了</p><p>打开博客根目录下的_config.yml这是博客的配置文件，可以在这里修改各种信息</p><p>修改最后一行的配置</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo: git@github.com:QiYi92/QiYi92.github.io.git  branch: main</code></pre><p>这里repo填的就是你博客仓库的地址<br>branch是你博客储存的主要分支，因为我们新建仓库时主要分支是main，那这里就填main。</p><p>如果两边分支不一样<code>hexo d</code>上传时候就会出错或发现更新无效，例如一些教程是master，而你仓库是main，这就导致很多人在这里踩坑</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>这里我用腾讯云的域名为例，阿里云也差不多<br>如何购买域名+实名一系列问题就不慢慢写了<br>这里只写如何添加域名<br>解析<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081739741.jpg"><br>添加@和www两条解析记录,记录类型选CNAME，记录值是你的默认网址也就是仓库名<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081744039.png"><br>然后打开你的github博客项目，点击settings，拉到下面Custom domain处，填上你自己的域名</p><h1 id="matery主题安装"><a href="#matery主题安装" class="headerlink" title="matery主题安装"></a>matery主题安装</h1><p><strong>这里有个坑需要说一下</strong><br>你的博客文件一共有两个最重要配置文件<code>_config,yml</code><br>一个是根目录的_config，另一个是 themes\hexo-theme-matery 里面的主题<code>_config.yml</code><br>你的基本设置是跟着前者走，而主题图片特效这些是跟着后者，看教程的时候一定要注意是在哪个<code>_config.yml</code>进行操作</p><p>如何配置matery主题还是matery作者自己写的官网文档靠谱，网上很多教你如何配置主题的帖子要不就是没写完全或者已经过时了。</p><h2 id="官方文档传送门"><a href="#官方文档传送门" class="headerlink" title="官方文档传送门"></a>官方文档传送门</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery中文说明文档</a></p><p>按着文档走完一遍的时候你的博客已经基本上成型了</p><h1 id="Gitnote文章编写发布及储存方案"><a href="#Gitnote文章编写发布及储存方案" class="headerlink" title="Gitnote文章编写发布及储存方案"></a>Gitnote文章编写发布及储存方案</h1><p>我们写博客的时候最宝贵的是文章数据，很多博客系统在数据的保管和迁移的方面做的实在是一言难尽，这里我提供一个非常方便编写和储存的方案</p><h2 id="Gitnote下载"><a href="#Gitnote下载" class="headerlink" title="Gitnote下载"></a>Gitnote下载</h2><p>首先我们先下载Gitnote<br><a href="https://www.gitnoteapp.com/">Gitnote下载传送门</a><br><a href="https://player.bilibili.com/player.html?aid=43903167&amp;cid=76908079&amp;page=1">Gitnote使用视频教程</a></p><p>GitNote 是一款基于 Git 来管理内容的免费跨平台笔记软件，它支持 Windows、macOS 以及 Linux 三大平台 (未来还会支持移动端)。软件直接内置了 Git 支持，你无须在本地安装或配置 Git，你的笔记即能拥有 Git 的特性，比如可以任意的恢复笔记的版本记录等</p><h2 id="Gitnote使用"><a href="#Gitnote使用" class="headerlink" title="Gitnote使用"></a>Gitnote使用</h2><p>gitnote安装好后是这样<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081819792.png"></p><p>在github上创建一个 <strong>私有</strong> 笔记仓库用来做笔记托管，这个仓库一定要与博客仓库<strong>保持独立</strong><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081811441.png"></p><p>接着我们把笔记仓库的SSH复制到gitnote上克隆仓库<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081823150.png"><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081824005.png"><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081826995.png"><br>克隆完成后就可以在Gitnote里完成你自己的文章编辑<br>支持markdown语法<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081829291.png"></p><p>如果你是编写hexo文章还需要在头部添加hexo的<code>front-matter</code><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081833053.png"></p><p>都知道hexo博客储存在根目录的<code>\source\_posts</code>文件夹内，等你写完一篇文章后直接将<code>文章.md</code>从你电脑上的笔记库粘贴到_post库里<br>再在git bash里输入</p><pre class="language-none"><code class="language-none">hexo clean &amp;&amp; hexo ghexo d</code></pre><p>即可完成发布</p><hr><p>而且你会发现你的文章已经自动同步到github笔记仓库里面了</p><p>如果需要迁移直接整个文件打包带走~非常方便</p><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081811357.png"></p><h1 id="Picgo图床"><a href="#Picgo图床" class="headerlink" title="Picgo图床"></a>Picgo图床</h1><p>PicGo是一款比较优秀的图床工具。它是一款用 Electron-vue 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床，功能强大，简单易用</p><p>一般如果不使用图床，你的图片会存放在_post的文章文件夹内，这对于博客迁移来说是非常不方便的，所以依旧是借助github的托管来做一个图床</p><h2 id="Picgo下载"><a href="#Picgo下载" class="headerlink" title="Picgo下载"></a>Picgo下载</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">Picgo传送门</a></p><h2 id="Picgo使用"><a href="#Picgo使用" class="headerlink" title="Picgo使用"></a>Picgo使用</h2><p>我们先创建一个图床仓库<br><strong>！注意仓库属性一定要设置为公共，如果是私有库的图片是无法被访问的</strong><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081847123.png"><br>创建好后，需要在 GitHub 上生成一个 token 以便 PicGo 来操作我们的仓库，来到个人中心，选择 Developer settings 就能看到 Personal access tokens，我们在这里创建需要的 token<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081850474.webp"><br>点击 Generate new token 创建一个新 token，选择 repo，同时它会把包含其中的都会勾选上，我们勾选这些就可以了。然后拉到最下方点击绿色按钮，Generate token 即可，之后就会生成一个 token 。</p><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081852431.png"><br>记得复制保存到其他地方，这个 token 只显示一次！！<br>记得复制保存到其他地方，这个 token 只显示一次！！<br>记得复制保存到其他地方，这个 token 只显示一次！！</p><p>这里我使用的是picgo 2.3.0的beta版<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081845263.png"><br>选择github图床<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081856677.png"><br>自定义域名按这个格式，使用cdn加速让国内也能正常访问<br><a href="https://cdn.jsdelivr.net/gh/**%E4%BD%A0%E7%9A%84id**/**%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/**你的id**/**仓库名</a>**</p><hr><h2 id="Picgo设置"><a href="#Picgo设置" class="headerlink" title="Picgo设置"></a>Picgo设置</h2><p>在 picgo设置里 开启时间戳重命名，这样可以让上传的图片名规范化，方便后期查找<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081901821.png"></p><p>好了，现在可以随意上传图片了</p><p>但，如果是想上传截图怎么办？<br>你需要在picgo的插件设置里搜索并下载<code>quick-capture</code>插件<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081903924.png"><br>修改快捷键，快速截图后picgo就直接帮你上传了，非常方便<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081904746.png"><br>之后把picgo的图片地址复制并且粘贴到你的gitnote文章里就可以正常显示了~<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081908816.png"></p><h2 id="picgo水印"><a href="#picgo水印" class="headerlink" title="picgo水印"></a>picgo水印</h2><p><strong>此方法需要安装<code>python3</code>及第三方库<code>PIL</code></strong></p><p>为了防范某些盗文章的公众号，水印还是必须要整<br>picgo插件库里是有水印插件的，但我发现picgo里的水印插件已经很久没有更新了，很多人都无法安装，无法使用，这这里我使用的是另一个方案<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081911707.png"><br>这时候就要祭出万能的Python了<br>我在github上发现2Dou大佬的批量添加水印项目貌似可以用来做picgo水印插件的替代品，但测试发现原项目在对gif图片添加水印时会导致gif动图无法使用，所以fork派生并修好了这个bug，顺便修正了几个参数错误，并且添加了几个关键参数的注释，方便直接在代码里修改参数，现在下载下来就可以直接使用了</p><p><a href="https://github.com/QiYi92/watermarker">批量添加水印项目传送门</a></p><p>使用方法：首先将你的图床仓库克隆到本地，再此项目部署在你的本地图床库中，像这样<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081926725.png"></p><p>接着在这个文件夹运行<code>命令提示符</code><br>输入</p><pre class="language-none"><code class="language-none">python marker.py -f ./img -m 水印内容</code></pre><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081928509.png"><br>等待脚本运行完成打开img文件夹，你就会发现你的图片都已经全部打上水印了（gif除外）<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081936051.png"><br>除此之外，还可以打开marker.py修改参数，以此来到达你想要的水印效果<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108081938776.png"></p><p>个人技术博客——二进制的伽利略’s Blog<br><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青年大学习完成截图爬虫</title>
      <link href="/qingniandaxuexi/"/>
      <url>/qingniandaxuexi/</url>
      
        <content type="html"><![CDATA[<p>青年大学习截图爬虫脚本</p><p>1.自动爬取青年大学习完成截图</p><p>2.该脚本无法对微信记录进行修改，只能生成最新期的截图</p><p>3.直接下载.exe文件运行即可，脚本会在同目录下生成截图.jpg文件<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072043652.jpeg"><br><a href="https://github.com/QiYi92/Youth_Learning_Reptile">Github项目地址</a><br><a href="https://github.com/QiYi92/Youth_Learning_Reptile/releases">Github下载地址</a></p><h3 id="核心源码"><a href="#核心源码" class="headerlink" title="核心源码"></a>核心源码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#中青报主页</span>    url <span class="token operator">=</span> <span class="token string">'http://news.cyol.com/node_67071.htm'</span>    <span class="token comment">#发送get请求,获取网页</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"响应状态%d"</span><span class="token operator">%</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token comment">#解析网页</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    newest <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[@class="mianbody"]/dl[@class="listMM"]/dd[@class="picB"]/ul[@class="movie-list"]/li[1]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    img_path <span class="token operator">=</span> newest<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'m.html'</span><span class="token punctuation">,</span> <span class="token string">'images/end.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token string">'images/end.jpg'</span><span class="token punctuation">)</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【教程】在VMware基于linux ubuntu虚拟机安装ucore</title>
      <link href="/course1/"/>
      <url>/course1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072048759.jpeg"><br>最近在学堂在线上学习操作系统这门课</p><p>实验环境一般是使用蓝桥的实验楼</p><p>但蓝桥的虚拟机上不方便你在本地记录和保存代码</p><p>所以我打算在本地用VMware上完成Ucore操作系统的实验课</p><p>实验课的源码在github上很容易就能搜索到，这边放一下链接记录一下<br><a href="https://github.com/kiukotsu/ucore">&gt;&gt;&gt;Github项目地址&lt;&lt;&lt;</a></p><hr><p>这门课的实验一共有几种实验方法<br>一就是<a href="https://www.lanqiao.cn/courses/221/learning/">实验楼</a>，好处就在方便，不用配置环境，直接用就行<br>不方便的地方就在保存源码困难</p><p>二是Windows环境，环境配置也是比较麻烦<br>Github里面也提供了链接，需要的朋友可以自己去下载</p><p>三是在VirtualBOX和VMWare进行实验<br>问题就在Github上提供了.vdi格式的安装包，这个格式只支持VirtualBOX，如果要使用VMware进行实验还需要进行转换</p><p>所以还是需要下载VirtualBOX   <a href="https://www.virtualbox.org/">[下载地址]</a><br>我使用的是VirtualBOX自带的VBoxManage进行转换<br>安装完毕后在VirtualBOX会看到<strong>VBoxManage.exe</strong>就说明成功了</p><p>把需要转换的vdi安装包放到一个知道路径的位置<br>然后在命令行进入到VirtualBOX目录下输入指令</p><pre class="language-none"><code class="language-none">VBoxManage clonehd f:\mooc-os-2015.vdi e:\mooc-os-2015.vmdk -- foormat vmdk</code></pre><p>这条指令的意思是把f盘根目录下的xxxx.vdi转换成vmdk存入e盘的根目录，地址根据你的目录自己调整<br>之后就得到了vmdk格式的安装包了<br>最后导入VMware就行了</p><p>。。。</p><p>最后在启动虚拟机时候发生了一个问题<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072052264.png"><br>啊。。这</p><p>也不难解决</p><p>解决这个问题要启动bios，重启进入bios<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072056914.jpeg"><br>各个电脑进入bios的方法都不一样，我这边是微星主板，重启时狂按delete就行了<br>然后依次 OC ————&gt; 其他设置 ——&gt; CPU特征 ——&gt;SVM Mode ——&gt; 允许<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072059838.jpeg"><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072059118.jpeg"><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072100917.jpeg"></p><p>记得保存<br>完美解决！</p><p><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108072100059.jpeg"></p><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> linux </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【教程】hexo matery奇怪BUG报错排雷总结</title>
      <link href="/hexo0/"/>
      <url>/hexo0/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="hexo-d向github部署博客后-ERROR-Deployer-not-found-git"><a href="#hexo-d向github部署博客后-ERROR-Deployer-not-found-git" class="headerlink" title="hexo d向github部署博客后 ERROR Deployer not found: git"></a>hexo d向github部署博客后 ERROR Deployer not found: git</h2></li></ul><p>$ hexo d</p><pre class="language-none"><code class="language-none">npm install --save hexo-deployer-git</code></pre><hr><ul><li><h2 id="hexo博客页面乱码"><a href="#hexo博客页面乱码" class="headerlink" title="hexo博客页面乱码"></a>hexo博客页面乱码</h2>例如<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108071729506.png"><br>解决办法：<br>找到对应页面的配置文件，例如友链就是friends.json，主副标题就是_config.yml<br>重新保存为UTF-8格式<br>这里以vscode为例，编码是用的是GB2312，我们以UTF-8格式保存即可，注意，是通过此编码保存，不是通过此编码打开<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108071733248.png"></li></ul><hr><ul><li><h2 id="hexo-d上传博客后不刷新"><a href="#hexo-d上传博客后不刷新" class="headerlink" title="$ hexo d上传博客后不刷新"></a>$ hexo d上传博客后不刷新</h2>输入hexo d之前输入<pre class="language-none"><code class="language-none">hexo clean &amp;&amp; hexo g</code></pre>亦或者分开输入<pre class="language-none"><code class="language-none">hexo cleanhexo g</code></pre>再输入hexo d上传即可</li></ul><hr><ul><li><h2 id="hexo编写完文章不显示在列表中"><a href="#hexo编写完文章不显示在列表中" class="headerlink" title="hexo编写完文章不显示在列表中"></a>hexo编写完文章不显示在列表中</h2>首先检查git bash后台是否有报错<br>如果有，说明你文章中有书写不规范的地方<br>例如<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108071750556.jpg"><br>这里就是文章front-matter里的summary带了不该带的东西(中括号[])，一般非法字符都可以在报错信息里看到，如果没有就控制变量法挨个筛查就好</li></ul><hr><ul><li><h2 id="hexo-toc目录不显示异常"><a href="#hexo-toc目录不显示异常" class="headerlink" title="hexo toc目录不显示异常"></a>hexo toc目录不显示异常</h2>现在hexo主题都基本上是自带toc<br>不需要安装<code>hexo-toc</code>插件了<br>如果有安装<code>hexo-toc</code>可以输入以下指令卸载<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> remove hexo-toc --save</code></pre>之后输入<code>hexo clean</code>刷新一遍就好了<br>最后把文章属性栏添加一行<pre class="language-none"><code class="language-none">toc: true</code></pre>搞定<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108082359927.png"></li></ul><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> debug </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【提高】用筛法求之N内的素数</title>
      <link href="/lanqiao8/"/>
      <url>/lanqiao8/</url>
      
        <content type="html"><![CDATA[<p>题目 1084: 用筛法求之N内的素数。<br>时间限制: 1Sec 内存限制: 64MB 提交: 14733 解决: 8802<br>题目描述<br>用筛法求之N内的素数。<br>输入<br>N<br>输出<br>0～N的素数<br>样例输入<br>100<br>样例输出<br>2<br>3<br>5<br>7<br>11<br>13<br>17<br>19<br>23<br>29<br>31<br>37<br>41<br>43<br>47<br>53<br>59<br>61<br>67<br>71<br>73<br>79<br>83<br>89<br>97</p><hr><p><strong>基础判断方法</strong><br>素数的性质：只有1和它本身这两个因数</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 基础判断方法</span><span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> n <span class="token operator">!=</span> <span class="token number">1</span>n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>优化算法</strong><br>当n是偶数的时候，根本不需要循环，除了2以外的偶数一定是合数。<br>由此引申出第一种优化方案</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#优化算法</span><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#当n是偶数时不需要循环，因为除了2以外的偶数一定是合数</span>    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># math,sqrt()返回括号内数的平方根</span>    <span class="token comment">#循环到平方根就可以了</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> n <span class="token operator">!=</span> <span class="token number">1</span>n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>进一步优化算法</strong><br>继续优化，数学上有一个定理，只有形如6n-1和6n+1的自然数可能是素数，这里的n是大于等于1的整数。<br>因为所有自然数都可以写成6n,6n+1,6n+2,6n+3,6n+4,6n+5这6种，其中6n,6n+2,6n+4是偶数，一定不是素数。6n+3可以写成3(2n+1)，显然也不是素数，所以只有可能6n+1和6n+5可能是素数。6n+5等价于6n-1，所以我们一般写成6n-1和6n+1。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#进一步优化算法</span><span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">6</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">and</span> n <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> n <span class="token operator">!=</span> <span class="token number">1</span></code></pre><p><strong>埃式筛法</strong><br>思路就是用已经筛选出来的素数去过滤所有能够被它整除的数。这些素数就像是筛子一样去过滤自然数，最后被筛剩下的数自然就是不能被前面素数整除的数，根据素数的定义，这些剩下的数也是素数。<br>如果要筛出100以内的所有素数，我们知道2是最小的素数，我们先用2可以筛掉所有的偶数。然后往后遍历到3，3是被2筛剩下的第一个数，也是素数，再用3去筛除所有能被3整除的数。筛完之后我们继续往后遍历，第一个遇到的数是7，所以7也是素数，我们再重复以上的过程，直到遍历结束为止。结束的时候，我们就获得了100以内的所有素数。<br><strong>用以下动图辅助理解</strong><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070217328.gif"><br><strong>算法思路：</strong><br>创建两个数组，一个数组放找到的素数(prime)，一个用来判断素数(is_prime)。<br>用来判断素数的列表用is_prime=[True]*(n+1)生成<br>生成后的样子[True,True,True,True,True…]<br>之后从2到n+1开始1循环，将i代入is_prime列表<br>如果当前i是True，该数为素数<br>将其放到素数数组内，然后进入2循环<br>如果当前i是False则直接进入2循环<br>2循环中依次取i的倍数（不算i），将其变成False<br>这样每次1循环循环到i的倍数，将不会执行append()</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#究极！埃式筛法</span><span class="token keyword">def</span> <span class="token function">eratosthenes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#埃拉托什尼</span>    primes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    is_prime<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#创建一个有n+1个True的列表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#将i代入is_prime列表中,如果true则执行，如果false则不执行</span>            primes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment">#用当前素数i去筛掉所有能被它整除的数</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#依次取i的倍数; 从i*2开始循环到n+1,步长为i;</span>                is_prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>    <span class="token keyword">return</span> primesn<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>eratosthenes<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>蓝桥杯1084题解答<br>运用到埃式筛法</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#蓝桥杯1084题</span>n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>primes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#素数数列</span>alist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#整体列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#把i代入整体列表判断,true则继续,false则跳过</span>        primes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【提高】芯片检测</title>
      <link href="/lanqiao7/"/>
      <url>/lanqiao7/</url>
      
        <content type="html"><![CDATA[<p>题目 1473: [蓝桥杯][基础练习VIP]芯片测试<br>时间限制: 1Sec 内存限制: 128MB 提交: 1270 解决: 635<br>题目描述<br>有n（2≤n≤20）块芯片，有好有坏，已知好芯片比坏芯片多。<br>每个芯片都能用来测试其他芯片。用好芯片测试其他芯片时，能正确给出被测试芯片是好还是坏。而用坏芯片测试其他芯片时，会随机给出好或是坏的测试结果（即此结果与被测试芯片实际的好坏无关）。<br>给出所有芯片的测试结果，问哪些芯片是好芯片。<br>输入<br>输入数据第一行为一个整数n，表示芯片个数。<br>第二行到第n+1行为n*n的一张表，每行n个数据。表中的每个数据为0或1，在这n行中的第i行第j列（1≤i,  j≤n）的数据表示用第i块芯片测试第j块芯片时得到的测试结果，1表示好，0表示坏，i=j时一律为1（并不表示该芯片对本身的测试结果。芯片不能对本  身进行测试）。<br>输出<br>按从小到大的顺序输出所有好芯片的编号<br>样例输入<br>3<br>1 0 1<br>0 1 0<br>1 0 1<br>样例输出<br>1 3</p><hr><p><strong>由题意可知<br>①好芯片比坏芯片多<br>②用好芯片测试其他芯片，能正确给出被测芯片是好是坏。用坏芯片测试其他芯片会随机给出好坏</strong><br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070212885.png"><br><strong>解题思路为</strong><br>所有好芯片对其他好芯片的检测结果都为1，因为坏芯片检测结果不固定，所以我们的判断不能一步到位<br>首先写一个判断语句，如果检测结果为1，则计数器加1</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> testarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    num<span class="token operator">+=</span><span class="token number">1</span></code></pre><p>好芯片比坏芯片数量多，所以用计数器来辅助判断，如果计数器的值大于芯片总数的1/2，说明满足条件</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> num<span class="token operator">&gt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span></code></pre><p>源码</p><pre class="language-python" data-language="python"><code class="language-python">n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>testarray<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#测试阵列</span>ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#答案列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#testarray列表存放芯片的测试结果</span>    testarray<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#构造列表</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#j循环为被检测的芯片编号循环</span>    num<span class="token operator">=</span><span class="token number">0</span> <span class="token comment">#被测结果计数器</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#i循环为检测j芯片的芯片编号循环</span>        <span class="token comment">#该行代码的意思是，检测第i个芯片对j个芯片的检测结果是否为1，如果是1则为好芯片</span>        <span class="token keyword">if</span> testarray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment">#检测第i行j列为1</span>            num<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment">#如果是好芯片，计数器+1</span>    <span class="token keyword">if</span> num<span class="token operator">&gt;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment">#检测计数器的值是否大于芯片总数的1/2，如果true,可知该芯片为好芯片</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment">#输出好芯片的编号</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【提高】sine之舞</title>
      <link href="/lanqiao6/"/>
      <url>/lanqiao6/</url>
      
        <content type="html"><![CDATA[<p>题目 1463: [蓝桥杯][基础练习VIP]Sine之舞<br>时间限制: 1Sec 内存限制: 128MB 提交: 1912 解决: 1154<br>题目描述<br>最近FJ为他的奶牛们开设了数学分析课，FJ知道若要学好这门课，必须有一个好的三角函数基本功。所以他准备和奶牛们做一个“Sine之舞”的游戏，寓教于乐，提高奶牛们的计算能力。<br>不妨设<br>An=sin(1–sin(2+sin(3–sin(4+…sin(n))…)<br>Sn=(…(A1+n)A2+n-1)A3+…+2)An+1<br>FJ想让奶牛们计算Sn的值，请你帮助FJ打印出Sn的完整表达式，以方便奶牛们做题。<br>输入<br>仅有一个数：N&lt;201。<br>输出<br>请输出相应的表达式Sn，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。<br>样例输入<br>3<br>样例输出<br>((sin(1)+3)sin(1-sin(2))+2)sin(1-sin(2+sin(3)))+1</p><hr><p>解题思路<br>找到Sn和An的规律<br><strong>A1=sin1<br>A2=sin(1-sin2)<br>A3=sin(1-sin(2+sin(3)))<br>A4=sin(1-sin(2+sin(3-sin(4))))</strong></p><p><strong>S1=A1+1<br>S2=(A1+2)A2+1<br>S3=((A1+3)A2+2)A3+1<br>S4=(((A1+4)A2+3)A3+2)A4+1</strong></p><p><strong>利用递归求解</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">An</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#A1=sin1</span><span class="token comment">#A2=sin(1-sin2)</span><span class="token comment">#A3=sin(1-sin(2+sin(3)))</span>    <span class="token keyword">if</span> i<span class="token operator">==</span>n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'sin('</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">#判断i的奇偶性</span>            s<span class="token operator">=</span><span class="token string">'+'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            s<span class="token operator">=</span><span class="token string">'-'</span>        <span class="token keyword">return</span> <span class="token string">'sin('</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>s<span class="token operator">+</span>An<span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span><span class="token keyword">def</span> <span class="token function">Sn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#S1=A1+1</span><span class="token comment">#S2=(A1+2)A2+1</span><span class="token comment">#S3=((A1+3)A2+2)A3+1</span>    <span class="token keyword">if</span> m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> An<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'+'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">#S1=A1+1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'('</span><span class="token operator">+</span>Sn<span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span><span class="token operator">+</span>An<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'+'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>num<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Sn<span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【提高】2n皇后问题</title>
      <link href="/lanqiao4/"/>
      <url>/lanqiao4/</url>
      
        <content type="html"><![CDATA[<p>题目 1460: [蓝桥杯][基础练习VIP]2n皇后问题<br>时间限制: 1Sec 内存限制: 128MB 提交: 1353 解决: 684<br>题目描述<br>给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。<br>输入<br>输入的第一行为一个整数n，表示棋盘的大小。<br>接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。<br>输出<br>输出一个整数，表示总共有多少种放法。<br>样例输入<br>4<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>样例输出<br>2</p><hr><p>这道题使用两个dfs深度搜索算法来解决，白皇后全部放完后再放入黑皇后。<br>用两个一维数组存储白皇后和黑皇后的放置位置，数组下标代表行，内容代表列。如ListW[2]代表白皇后在第3行(数组从0开始)的位置<br>两个函数分别判断白皇后和黑皇后即将放入的位置上面的行中是否有在同一列或者在同一对角线<br><strong>具体实行看代码注释</strong></p><pre class="language-python" data-language="python"><code class="language-python">themax <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 获取棋盘边界</span>canInput <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 二维数组来保存能否放置</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>themax<span class="token punctuation">)</span><span class="token punctuation">:</span>    canInput<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ListW <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token comment"># 白皇后放置位置</span>ListB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token comment"># 黑皇后放置位置</span>nums <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 记录总数</span><span class="token comment"># 检查白皇后是否可以放入</span><span class="token keyword">def</span> <span class="token function">checkW</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> columu<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 如果在第一行则直接放入</span>    <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment"># 循环上面的行中是否存在冲突</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#检测是否有同列;检测是否存在对角线（两边相减的绝对值相等则存在）</span>        <span class="token keyword">if</span> ListW<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> columu <span class="token keyword">or</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>row <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>columu <span class="token operator">-</span> ListW<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment"># 检查黑皇后是否可以放入</span><span class="token keyword">def</span> <span class="token function">checkB</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> columu<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 如果白皇后在这个位置 则不可放入</span>    <span class="token keyword">if</span> ListW<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">==</span> columu<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment"># 如果在第一行则直接放入</span>    <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment"># 循环上面的行中是否存在冲突</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ListB<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> columu <span class="token keyword">or</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>row <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>columu <span class="token operator">-</span> ListB<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">dfsW</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 最后一行被填上时调用黑皇后dfs</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> themax<span class="token punctuation">:</span> <span class="token comment"># 如果n等于棋盘边界，则开始放黑皇后dfsB()</span>        dfsB<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>themax<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> canInput<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 判断是否为0，如果为零就跳过此位置</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> checkW<span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span> <span class="token comment"># 调用函数checkW(),如果返回False则继续</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 如果没有出现以上情况</span>                ListW<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token comment">#把值赋值给白皇后数列的第n个数</span>                dfsW<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#继续判断下一个数</span><span class="token keyword">def</span> <span class="token function">dfsB</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 最后一行被填入时候num+1</span>    <span class="token comment"># num+1说明第一种可能性已经跑完</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> themax<span class="token punctuation">:</span>        <span class="token keyword">global</span> nums        nums <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>themax<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> canInput<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">elif</span> checkB<span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ListB<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i                dfsB<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>dfsW<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础】杨辉三角</title>
      <link href="/lanqiao3/"/>
      <url>/lanqiao3/</url>
      
        <content type="html"><![CDATA[<p>题目 1231: 杨辉三角</p><p>时间限制: 1Sec 内存限制: 128MB 提交: 2261 解决: 750<br>题目描述</p><p>还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形：<br>1<br>1 1<br>1 2 1<br>1 3 3 1<br>1 4 6 4 1<br>1 5 10 10 5 1<br>输入<br>输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数n（1＜=n＜=30），表示将要输出的杨辉三角的层数。<br>输出<br>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。<br>样例输入<br>2 3<br>样例输出<br>1<br>1 1<br>1<br>1 1<br>1 2 1</p><pre class="language-python" data-language="python"><code class="language-python">al<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>al<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token operator">=</span>al<span class="token punctuation">[</span>a<span class="token punctuation">]</span>    nums<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>杨辉三角解析<br>杨辉三角是一道非常经典的题目。我们先来看杨辉三角的一些概述，以下来自百度百科<br>前提：每行端点与结尾的数为1.<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070149816.png"><br>每个数等于它上方两数之和。<br>每行数字左右对称，由1开始逐渐变大。<br>第n行的数字有n项。<br>前n行共[(1+n)n]/2 个数。<br>第n行的m个数可表示为 C(n-1，m-1)，即为从n-1个不同元素中取m-1个元素的组合数。<br>第n行的第m个数和第n-m+1个数相等 ，为组合数性质之一。<br>每个数字等于上一行的左右两个数字之和。可用此性质写出整个杨辉三角。即第n行的第i个数等于第n-1行的第i-1个数和第i个数之和，这也是组合数的性质之一。即 C(n+1,i)=C(n,i)+C(n,i-1)。<br>通过这些性质我们可以知道一些规律，当然图片会更直观。</p><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【提高】回形取数</title>
      <link href="/lanqiao5/"/>
      <url>/lanqiao5/</url>
      
        <content type="html"><![CDATA[<p>题目 1465: [蓝桥杯][基础练习VIP]回形取数<br>时间限制: 1Sec 内存限制: 128MB 提交: 2313 解决: 754<br>题目描述<br>回形取数就是沿矩阵的边取数，若当前方向上无数可取或已经取过，则左转90度。一开始位于矩阵左上角，方向向下。<br>输入<br>输入第一行是两个不超过200的正整数m,  n，表示矩阵的行和列。接下来m行每行n个整数，表示这个矩阵。<br>输出<br>输出只有一行，共mn个数，为输入矩阵回形取数得到的结果。数之间用一个空格分隔，行末不要有多余的空格。<br>样例输入<br>3 3<br>1 2 3<br>4 5 6<br>7 8 9<br>样例输出<br>1 4 7 8 9 6 3 2 5<br>math.ceil(min(r,c)/2)  表示要转的圈数<br>r=行    c=列<br>math()函数是用来向上取整<br>Math.ceil(0.35) ———-&gt; 1<br>Math.ceil(10) ———-&gt; 10<br>Math.ceil(-10) ———-&gt; -10<br>Math.ceil(-10.1)———-&gt; -10<br>min()函数取当中最小的数,本题中r最小取r,c最小取c<br>例子<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070153592.png"><br>4x4的矩阵<br>min()取得4，/2，math.ceil()向上取整得2<br>得出这个回形转2次<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070154678.png"><br>5x5的矩阵<br>min()取得5，/2，math.ceil()向上取整得3<br>得出这个回形转2次<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070154166.png"><br>4x3的矩阵<br>min()取得3，/2，math.ceil()向上取整得2<br>得出这个回形转2次</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math <span class="token comment">#导入math包</span>r<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#其中r,c分别代表要输入数据的行数和列数</span>list1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#列表用来存放键盘输入的数据</span>ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#用来存放要输出的数据</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#二维列表输入实例</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#math.ceil（）函数是用来向上取整，向下取整直接整数相除即可，math.ceil(min(r,c)/2表示要转的圈数</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>r<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#将第j圈的左“1”字形x放入ans；</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#将第j圈的下“一”字形x放入ans;</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">:</span><span class="token comment">#判断一下是否还有多余的列需要转圈</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#将第j圈的右“1”字形放入ans；</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">:</span>        <span class="token keyword">for</span> q <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#将第j圈的上“一”字形放入ans；</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> ans<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【基础】数列排序</title>
      <link href="/lanqiao2/"/>
      <url>/lanqiao2/</url>
      
        <content type="html"><![CDATA[<p>题目 1853: [蓝桥杯][基础练习]数列排序<br>时间限制: 1Sec 内存限制: 128MB 提交: 1174 解决: 748<br>题目描述<br>给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200<br>输入</p><p>第一行为一个整数n。<br>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。<br>输出<br>输出一行，按从小到大的顺序输出排序后的数列。<br>样例输入<br>5<br>8 3 6 4 9<br>样例输出<br>3 4 6 8 9</p><hr><p>调用sort()函数方法</p><pre class="language-python" data-language="python"><code class="language-python">n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> n<span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token keyword">and</span> n<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">:</span>    sl<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sl<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#sort()排序函数，默认reverse=False从小到大输出,reverse=True则相反</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">#end=' '的作用是输出不换行</span></code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>sort()方法语法：<br>list.sort(cmp=None, key=None, reverse=False)</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>语法<br>sort()方法语法：<br>list.sort(cmp=None, key=None, reverse=False)</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序。<br>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>reverse – 排序规则，reverse = True 降序， reverse = False 升序（默认）。</p><p><strong>冒泡排序方法</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bublle_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#冒泡排序</span>    n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>    <span class="token comment">#一趟只归位出一个数字，如果有n个数字，需要进行n-1趟</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#计数器归零</span>        <span class="token comment">#归位后数字不需要比较，所以每趟只需要比较n-1-j次（j为已执行趟数）</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        count <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment">#每交换一次，计数器加一</span>    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">==</span> count<span class="token punctuation">:</span> <span class="token comment">#如果计数器为零，也就是无需交换时，结束</span>        <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    alist<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bublle_sort<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>    <span class="token comment">#如果直接print(alist)</span>    <span class="token comment">#会输出数组[3,4,5,6,7]</span>    <span class="token comment">#题目要求输出3 4 5 6 7</span>    <span class="token comment">#故只能用for循环依次输出</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">#" "表示空格,end=' '的作用是输出不换行</span></code></pre><p>冒泡排序<br>第一趟<br><img src="https://cdn.jsdelivr.net/gh/QiYi92/ImageHost/img/202108070132164.png"><br>由于一趟只归为一个数，则如果有n个数字，则需要进行n-1趟。<br>因为归位后的数字不用再比较了，所以每趟只需要比较n-1-j次（j为已执行的趟数）</p><h2 id="len-语法"><a href="#len-语法" class="headerlink" title="len()语法"></a>len()语法</h2><p>len()方法语法：<br>len( s )</p><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>s – 对象。</p><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>返回对象长度。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例展示了 len() 的使用方法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token comment"># 字符串长度</span><span class="token number">6</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token comment"># 列表元素个数</span><span class="token number">5</span></code></pre><p>Python split() 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</p><h2 id="split-语法"><a href="#split-语法" class="headerlink" title="split()语法"></a>split()语法</h2><p>split() 方法语法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> num<span class="token operator">=</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><p>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。<br>num – 分割次数。默认为 -1, 即分隔所有。</p><h2 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h2><p>返回分割后的字符串列表。</p><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【入门】斐波那契数列</title>
      <link href="/lanqiao1/"/>
      <url>/lanqiao1/</url>
      
        <content type="html"><![CDATA[<p>题目 1854: [蓝桥杯][入门训练]Fibonacci数列<br>时间限制: 1Sec 内存限制: 128MB 提交: 936 解决: 534<br>题目描述<br>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。<br>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。<br>输入<br>输入包含一个整数n。<br>输出<br>输出一行，包含一个整数，表示Fn除以10007的余数。<br>样例输入<br>10<br>样例输出<br>55<br>源码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span> <span class="token comment">#try except异常处理机制</span>        n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输入</span>        F1<span class="token punctuation">,</span>F2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token comment">#斐波那契数列从3开始到n+1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment">#F1等于数列里的下一个数，也就是F2</span>            <span class="token comment">#F2等于前两项相加</span>        F1<span class="token punctuation">,</span> F2 <span class="token operator">=</span> F2 <span class="token operator">%</span> <span class="token number">10007</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>F1 <span class="token operator">+</span> F2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10007</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>F2<span class="token punctuation">)</span> <span class="token comment">#输出在for循环外，不可与for循环同行</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h3 id="个人技术博客——二进制的伽利略’s-Blog"><a href="#个人技术博客——二进制的伽利略’s-Blog" class="headerlink" title="个人技术博客——二进制的伽利略’s Blog"></a>个人技术博客——二进制的伽利略’s Blog</h3><p><a href="http://galileocat.cn/">http://galileocat.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
